//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::ApplicationData.Implementation.ApplicationDataObjectContext>
    {
    
        public ApplicationDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Person
    
        public void InsertPerson(global::ApplicationData.Implementation.Person entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.People.AddObject(entity);
            }
        }
    
        public void UpdatePerson(global::ApplicationData.Implementation.Person currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.People, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeletePerson(global::ApplicationData.Implementation.Person entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.People.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Gender
    
        public void InsertGender(global::ApplicationData.Implementation.Gender entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Genders.AddObject(entity);
            }
        }
    
        public void UpdateGender(global::ApplicationData.Implementation.Gender currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Genders, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteGender(global::ApplicationData.Implementation.Gender entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Genders.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> People_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Person>("People_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> People_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Person>("People_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> People_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Person>("People_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> Genders_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Gender>("Genders_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> Genders_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Gender>("Genders_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> Genders_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Gender>("Genders_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().ApplicationData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::ApplicationData.Implementation.ApplicationDataObjectContext>
    {
        public ApplicationDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> People_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Person>("People_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> People_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Person>("People_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> People_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Person> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.Person>("[People]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> Genders_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Gender>("Genders_All"),
                (g) => (Id.HasValue && (g.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> Genders_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Gender>("Genders_All"),
                (g) => (Id.HasValue && (g.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> Genders_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Gender> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.Gender>("[Genders]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::ApplicationData.Implementation.Person))
            {
                return new global::ApplicationData.Implementation.Person();
            }
            if (type == typeof(global::ApplicationData.Implementation.Gender))
            {
                return new global::ApplicationData.Implementation.Gender();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::ApplicationData.Implementation.ApplicationDataObjectContext CreateObjectContext()
        {
            return new global::ApplicationData.Implementation.ApplicationDataObjectContext(base.GetEntityConnectionString(
                "_IntrinsicData", 
                "res://*/ApplicationData.csdl|res://*/ApplicationData.ssdl|res://*/ApplicationData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Person))
            {
                return new global::ApplicationData.Implementation.Person();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Gender))
            {
                return new global::ApplicationData.Implementation.Gender();
            }
            return null;
        }
    
    #endregion
    
    }
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ReportDataService2DataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::ReportDataService2Data.Implementation.ReportDataService2DataObjectContext>
    {
    
        public ReportDataService2DataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region ReportDataClass
    
        public void InsertReportDataClass(global::ReportDataService2Data.Implementation.ReportDataClass entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ReportDataClasses.AddObject(entity);
            }
        }
    
        public void UpdateReportDataClass(global::ReportDataService2Data.Implementation.ReportDataClass currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ReportDataClasses, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteReportDataClass(global::ReportDataService2Data.Implementation.ReportDataClass entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ReportDataClasses.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> ReportDataClasses_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ReportDataService2Data.Implementation.ReportDataClass>("ReportDataClasses_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> ReportDataClasses_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ReportDataService2Data.Implementation.ReportDataClass>("ReportDataClasses_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> ReportDataClasses_All(string frameworkOperators)
        {
            return this.GetQuery<global::ReportDataService2Data.Implementation.ReportDataClass>("ReportDataClasses_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().ReportDataService2Data;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ReportDataService2DataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.RiaDataServiceImplementation<global::ReportDataService2Data.Implementation.ReportDataService2DataObjectContext, global::Central.Data.Services.ReportDataService2>
    {
        public ReportDataService2DataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> ReportDataClasses_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ReportDataService2Data.Implementation.ReportDataClass>("ReportDataClasses_All"),
                (r) => (Id.HasValue && (r.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> ReportDataClasses_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ReportDataService2Data.Implementation.ReportDataClass>("ReportDataClasses_All"),
                (r) => (Id.HasValue && (r.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> ReportDataClasses_All()
        {
            global::System.Linq.IQueryable<global::ReportDataService2Data.Implementation.ReportDataClass> query;
            query = base.CreateQuery<global::ReportDataService2Data.Implementation.ReportDataClass>("GenderCount").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::ReportDataService2Data.Implementation.ReportDataClass))
            {
                return new global::ReportDataService2Data.Implementation.ReportDataClass();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::ReportDataService2Data.Implementation.ReportDataService2DataObjectContext CreateObjectContext()
        {
            return new global::ReportDataService2Data.Implementation.ReportDataService2DataObjectContext(base.GetEntityConnectionString(
                "ReportDataService2Data", 
                "res://*/ReportDataService2Data.csdl|res://*/ReportDataService2Data.ssdl|res://*/ReportDataService2Data.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.ReportDataClass))
            {
                return new global::ReportDataService2Data.Implementation.ReportDataClass();
            }
            return null;
        }
        protected override global::System.Type ConvertType(global::System.Type outerType)
        {
            if (outerType == typeof(global::ReportDataService2Data.Implementation.ReportDataClass))
            {
                return typeof(global::Central.Data.Services.ReportDataClass);
            }
            return base.ConvertType(outerType);
        }
        protected override object ConvertEntity(object outerEntity)
        {
            global::ReportDataService2Data.Implementation.ReportDataClass reportDataClass = outerEntity as global::ReportDataService2Data.Implementation.ReportDataClass;
            if (reportDataClass != null)
            {
                global::Central.Data.Services.ReportDataClass result = new global::Central.Data.Services.ReportDataClass();
                result.Id = reportDataClass.Id;
                result.Name = reportDataClass.Name;
                result.Total = reportDataClass.Total;
                return result;
            }
            return null;
        }
       
    
        protected override void UpdateResult(object outerEntity, object innerResult)
        {
            global::ReportDataService2Data.Implementation.ReportDataClass outerReportDataClass = outerEntity as global::ReportDataService2Data.Implementation.ReportDataClass;
            global::Central.Data.Services.ReportDataClass innerReportDataClass = innerResult as global::Central.Data.Services.ReportDataClass;
            if ((outerReportDataClass != null) && (innerReportDataClass != null))
            {
                outerReportDataClass.Id = innerReportDataClass.Id;
                outerReportDataClass.Name = innerReportDataClass.Name;
                outerReportDataClass.Total = innerReportDataClass.Total;
                return;
            }
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.ApplicationDataService();
            }
            if (dataServiceType == typeof(global::LightSwitchApplication.ReportDataService2Data))
            {
                return new global::LightSwitchApplication.ReportDataService2DataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.Implementation.ApplicationDataServiceImplementation(dataService);
            }
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.ReportDataService2Data))
            {
                return new global::LightSwitchApplication.Implementation.ReportDataService2DataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Person) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.Person);
            }
            if (typeof(global::LightSwitchApplication.Gender) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.Gender);
            }
            if (typeof(global::LightSwitchApplication.ReportDataClass) == definitionType)
            {
                return typeof(global::ReportDataService2Data.Implementation.ReportDataClass);
            }
            return null;
        }
    }
}

namespace ApplicationData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.Person.Metadata))]
    public partial class Person :
        global::LightSwitchApplication.Person.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Person.DetailsClass.IImplementation.Gender
        {
            get
            {
                return this.Gender;
            }
            set
            {
                this.Gender = (global::ApplicationData.Implementation.Gender)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Gender");
                }
            }
        }
        
        partial void OnPerson_GenderChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Gender");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Gender Gender { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Gender :
        global::LightSwitchApplication.Gender.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Gender.DetailsClass.IImplementation.People
        {
            get
            {
                return this.People;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

namespace ReportDataService2Data.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ReportDataClass :
        global::LightSwitchApplication.ReportDataClass.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

